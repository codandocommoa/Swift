//: [Anterior (B√°sico) ](Basico)
/*:
 ### Constantes e Vari√°veis
 Constantes e vari√°veis ‚Äã‚Äãassociam um nome (como maximumNumberOfLoginAttempts ou welcomeMessage) a um valor de um tipo espec√≠fico (como o n√∫mero 10 ou a string "Hello"). O valor de uma constante n√£o pode ser alterado depois de definido, enquanto uma vari√°vel pode ser definida com um valor diferente no futuro.

 ### Declarando Constantes e Vari√°veis
 Constantes e vari√°veis ‚Äã‚Äãdevem ser declaradas antes de serem usadas. Voc√™ declara constantes com a palavra-chave let e vari√°veis ‚Äã‚Äãcom a palavra-chave var. Aqui est√° um exemplo de como constantes e vari√°veis ‚Äã‚Äãpodem ser usadas para rastrear o n√∫mero de tentativas de login que um usu√°rio fez:
 */
let maximumNumberOfLoginAttempts = 10
var currentLoginAttemp = 0


/*:
 ### Este c√≥digo pode ser lido como:

 ‚ÄúDeclare uma nova constante chamada maximumNumberOfLoginAttempts e d√™ a ela um valor de 10. Em seguida, declare uma nova vari√°vel chamada currentLoginAttempt e d√™ a ela um valor inicial de 0.‚Äù

 Neste exemplo, o n√∫mero m√°ximo de tentativas de login permitidas √© declarado como uma constante, porque o valor m√°ximo nunca muda. O contador de tentativas de login atual √© declarado como uma vari√°vel, pois esse valor deve ser incrementado ap√≥s cada tentativa de login com falha.

 Voc√™ pode declarar v√°rias constantes ou v√°rias vari√°veis em uma √∫nica linha, separadas por v√≠rgulas:‚Äù

 */

var x = 0.0, y = 0.0, z = 0.0

/*:
 > Se um valor armazenado em seu c√≥digo n√£o mudar, sempre o declare como uma constante com a palavra-chave let. Use vari√°veis apenas para armazenar valores que precisam ser alterados.
 */

/*:
### Tipo de anota√ß√µes
 Voc√™ pode fornecer uma anota√ß√£o de tipo ao declarar uma constante ou vari√°vel, para esclarecer o tipo de valores que a constante ou vari√°vel pode armazenar. Escreva uma anota√ß√£o de tipo colocando dois pontos ap√≥s o nome da constante ou vari√°vel, seguido por um espa√ßo, seguido pelo nome do tipo a ser usado.

 Este exemplo fornece uma anota√ß√£o de tipo para uma vari√°vel chamada welcomeMessage, para indicar que a vari√°vel pode armazenar valores de String:
*/

var welcomeMessage: String

/*:
 Os dois pontos na declara√ß√£o significam ‚Äú‚Ä¶ do tipo‚Ä¶‚Äù, ent√£o o c√≥digo acima pode ser lido como:

 ‚ÄúDeclare uma vari√°vel chamada welcomeMessage que √© do tipo String.‚Äù

 A frase ‚Äúdo tipo String‚Äù significa ‚Äúpode armazenar qualquer valor de String‚Äù. Pense nisso como significando ‚Äúo tipo de coisa‚Äù (ou ‚Äúo tipo de coisa‚Äù) que pode ser armazenado.

 A vari√°vel welcomeMessage agora pode ser definida para qualquer valor de string sem erro:
*/

welcomeMessage = "Hello"

/*:
 Voc√™ pode definir v√°rias vari√°veis relacionadas do mesmo tipo em uma √∫nica linha, separadas por v√≠rgulas, com uma anota√ß√£o de tipo √∫nico ap√≥s o nome da vari√°vel final:
*/
 
var red, green, blue: Double

/*:
 > √â raro que voc√™ precise escrever anota√ß√µes de tipo na pr√°tica. Se voc√™ fornecer um valor inicial para uma constante ou vari√°vel no ponto em que ela √© definida, o Swift quase sempre pode inferir o tipo a ser usado para essa constante ou vari√°vel, conforme descrito em Type Safety and Type Inference. No exemplo welcomeMessage acima, nenhum valor inicial √© fornecido e, portanto, o tipo da vari√°vel welcomeMessage √© especificado com uma anota√ß√£o de tipo em vez de ser inferido a partir de um valor inicial.
 */
 

/*:
 ### Nomeando Constantes e Vari√°veis
 Nomes de constantes e vari√°veis podem conter quase qualquer caractere, incluindo caracteres Unicode:
*/

let œÄ = 3.14159
let ‰Ω†Â•Ω = "‰Ω†Â•Ω‰∏ñÁïå"
let üê∂üêÆ = "dogcow"

/*:
 Nomes de constantes e vari√°veis n√£o podem conter caracteres de espa√ßo em branco, s√≠mbolos matem√°ticos, setas, valores escalares Unicode de uso privado ou caracteres de desenho de linha e caixa. Nem podem come√ßar com um n√∫mero, embora os n√∫meros possam ser inclu√≠dos em outros lugares dentro do nome.

 Depois de declarar uma constante ou vari√°vel de um determinado tipo, voc√™ n√£o pode declar√°-la novamente com o mesmo nome ou alter√°-la para armazenar valores de um tipo diferente. Nem voc√™ pode transformar uma constante em uma vari√°vel ou uma vari√°vel em uma constante.
 
>Se voc√™ precisar dar a uma constante ou vari√°vel o mesmo nome de uma palavra-chave reservada do Swift, coloque a palavra-chave com acentos graves (`) ao us√°-la como um nome. No entanto, evite usar palavras-chave como nomes, a menos que voc√™ n√£o tenha absolutamente nenhuma escolha.
 
 Voc√™ pode alterar o valor de uma vari√°vel existente para outro valor de um tipo compat√≠vel. Neste exemplo, o valor de friendlyWelcome √© alterado de "Hello!" para ‚ÄúBonjour!":
*/

var friendlyWelcome = "Hello!"
friendlyWelcome = "Bonjour!"
// friendlyWelcome is now "Bonjour!‚Äù

/*:
 Ao contr√°rio de uma vari√°vel, o valor de uma constante n√£o pode ser alterado depois de definido. A tentativa de fazer isso √© relatada como um erro quando seu c√≥digo √© compilado:
*/

let languageName = "Swift"
// remova o comentario // da linha abaixo e veja o erro
//languageName = "Swift++"
// This is a compile-time error: languageName cannot be changed.‚Äù

/*:
 Impress√£o de Constantes e Vari√°veis
 Voc√™ pode imprimir o valor atual de uma constante ou vari√°vel com a fun√ß√£o print(_:separator:terminator:):
*/

print(friendlyWelcome)
// Prints "Bonjour!‚Äù


/*:
 A fun√ß√£o print(_:separator:terminator:) √© uma fun√ß√£o global que imprime um ou mais valores em uma sa√≠da apropriada. No Xcode, por exemplo, a fun√ß√£o print(_:separator:terminator:) imprime sua sa√≠da no painel ‚Äúconsole‚Äù do Xcode. Os par√¢metros separador e terminator t√™m valores padr√£o, portanto, voc√™ pode omiti-los ao chamar essa fun√ß√£o. Por padr√£o, a fun√ß√£o encerra a linha que imprime adicionando uma quebra de linha. Para imprimir um valor sem uma quebra de linha depois dele, passe uma string vazia como o terminator‚Äîpor exemplo, print(someValue, terminator: ""). Para obter informa√ß√µes sobre par√¢metros com valores padr√£o, consulte Valores de par√¢metro padr√£o.

 O Swift usa a interpola√ß√£o de strings para incluir o nome de uma constante ou vari√°vel como um espa√ßo reservado em uma string mais longa e para solicitar que o Swift o substitua pelo valor atual dessa constante ou vari√°vel. Coloque o nome entre par√™nteses e escape com uma barra invertida antes do par√™ntese de abertura:
*/
 

print("The current value of friendlyWelcome is \(friendlyWelcome)")
// Prints "The current value of friendlyWelcome is Bonjour!‚Äù

/*:
 > Todas as op√ß√µes que voc√™ pode usar com a interpola√ß√£o de strings est√£o descritas em String Interpolation
 */
 
 
 
//: [Pr√≥xima (Coment√°rios)](Comentarios)

